#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'trellist'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/trellist` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/trellist now"
  exit 64
end

include GLI::App

program_desc 'Trellist retreives a list from specified Trello board and ' \
             'formats the card data for using elsewhere like Markdown.'

version Trellist::VERSION

subcommand_option_handling :normal
arguments :strict

config_file '.trellist'

# could maybe have a verbose mode with this switch
# desc 'Describe some switch here'
# switch [:s,:switch]

# Global flags
desc 'your Trello board id; like: ABC123XR'
default_value '' # empty we'll raise if empty
arg_name 'board'
flag [:b,:board], required: true

desc 'your Trello TRELLO_DEVELOPER_PUBLIC_KEY'
default_value '' # empty we'll raise if empty
arg_name 'TRELLO_DEVELOPER_PUBLIC_KEY'
flag [:k,:key], required: true

desc 'your Trello TRELLO_MEMBER_TOKEN'
default_value '' # empty we'll raise if empty
arg_name 'TRELLO_MEMBER_TOKEN'
flag [:t,:token], required: true

desc 'Get cards from list'
command :cards do |c|
  c.desc 'Gets cards from a selection of lists from the provided Trello board'
  c.default_value 'mdown'
  c.flag [:f, :format]
  c.action do |global_options,options,args|
    puts Paint["fetching lists...", :blue]
    @client = Client.new(key: global_options[:key],
                         token: global_options[:token],
                         board_id: global_options[:board])

    @client.get_board_lists # this sets @client.lists
    # TODO(chaserx):
    # iterate of @client.lists printing an index and the list name
    if @client.lists.empty?
      raise "There were no lists for #{global_options[:board]}"
    end

    @client.lists.each_with_index do |list, index|
      puts "#{index}. #{list.name}"
    end
    # ask for which list or to quit
    @answer = ''
    until @answer == 'q'
      choices = Paint["Select from 0..#{@client.lists.size - 1} or (q)uit ---> ", :blue]
      @answer = ask(choices, String) do |response|
        response.case = :downcase
        response.validate = /\A\d+\w?|q\z/
      end

      case @answer
      when /\d+\w?/
        @answer.scan(/\d+/) do |stringed_number|
          if list=@client.lists[stringed_number.to_i]
            puts Paint["OK. Here are the cards for #{list.name}:", :blue]
            puts Paint["---", :blue]
            @client.list_cards(list.id)
            @client.generate_links
            puts Paint["---", :blue]
            break
          else
           puts Paint["Your choice, #{@answer}, is not in the list 0..#{@client.lists.size - 1}", :red]
          end
        end
      when 'q'
        puts Paint['Later.', :yellow]
      else
        puts Paint["Sorry. Unknown option: #{@answer.chomp}", :red]
      end
    end
    # for selected list:
    #   retreive cards from selected list
    #   print card information in the selected format, default: markdown
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
